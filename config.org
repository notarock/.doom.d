* Notarock's Doom-Emacs Literate Configuration

This file is heavily inspired by doom-emacs's base `config.el` file. In fact,
it's just my personnal `config.el` translated to org-mode so

** Basics
These are used for a number of things, particularly for GPG configuration,
some email clients, file templates and snippets.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Roch D'Amour"
      user-mail-address "roch.damour@gmail.com")
#+END_SRC

** Theming
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+BEGIN_SRC emacs-lisp
;; (setq font-family "JetBrains Mono Medium")
;; (setq font-family "M+ 1m")
(setq font-family "Fantasque Sans Mono")

(if (equal (display-pixel-width) 2560)
    (setq doom-font (font-spec :family font-family :size 20)
          doom-big-font (font-spec :family font-family :size 30))
  (setq doom-font (font-spec :family font-family :size 14)
        doom-big-font (font-spec :family font-family :size 24)))
#+END_SRC

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. These are the defaults.
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-snazzy)
#+END_SRC

 want to change the style of line numbers, change this to `relative' or
`nil' to disable it:
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

** Org-mode
If you intend to use org, it is recommended you change this!

#+begin_emacs-lisp
;; (setq org-directory "~/org/")
#+end_emacs-lisp
** Mics
Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', where Emacs
  looks when you load packages with `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
This will open documentation for it, including demos of how they are used.
You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
they are implemented.

* Here lies my personnal configurations.
#+BEGIN_SRC emacs-lisp

(setq fancy-splash-image "~/.doom.d/notarock.png")

#+END_SRC

** Additionnal files
*** Org-mode
#+BEGIN_SRC emacs-lisp
(load! "~/.doom.d/personal/my-org.el")
#+END_SRC
*** Aditionnal functions
#+BEGIN_SRC emacs-lisp
(load! "~/.doom.d/defuns/utils.el")
#+END_SRC

** Keybinds
*** Text manipulation
#+BEGIN_SRC emacs-lisp
(map! :ne "C-S-k" #'drag-stuff-up)
(map! :ne "C-S-j" #'drag-stuff-down)
(map! :ne "C-S-l" #'drag-stuff-right)
(map! :ne "C-S-h" #'drag-stuff-left)
#+END_SRC
*** Comment, indents, etc
#+BEGIN_SRC emacs-lisp
(map! :ne "SPC #" #'comment-or-uncomment-region)
(map! :ne "SPC =" #'indent-buffer)
#+END_SRC
*** Project navigation
Uses dumb-jump to find functions, variables, and other definition
#+BEGIN_SRC emacs-lisp
(map! :ne "SPC j g" #'dumb-jump-go)
(map! :ne "SPC j b" #'dumb-jump-back)
#+END_SRC
*** Text insertion
#+BEGIN_SRC emacs-lisp
(map! :ne "SPC s h" #'insert-random-hash)
#+END_SRC

*** Windows & frame manipulation
#+BEGIN_SRC emacs-lisp
(map! :ne "SPC w V" (lambda () (interactive)(evil-window-vsplit) (other-window 1)))
#+END_SRC

** Others
*** Hacks
#+BEGIN_SRC emacs-lisp
(map! [remap org-capture] nil)
#+END_SRC
*** Additionnal modes
#+BEGIN_SRC emacs-lisp
(global-git-gutter-mode +1)
#+END_SRC
